version: "3.8"
services:

  pg1:
    image: postgres:13
    ports:
      - 15432:5432
    volumes:
      # - ./certs:/etc/certs:ro
      - .docker-data/pg1:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    # command: postgres -c ssl=on -c ssl_cert_file=/etc/certs/local-cert.pem -c ssl_key_file=/etc/certs/local-key.pem
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 20
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.pg1.loadBalancer.server.port=5432"
      - "traefik.tcp.routers.pg1.entrypoints=postgres"
      - "traefik.tcp.routers.pg1.rule=HostSNI(`*`)"
      # - "traefik.tcp.routers.pg1.rule=HostSNI(`pg1.docker.localhost`)"
      # - "traefik.tcp.routers.pg1.tls=false"

  pg2:
    image: postgres:13
    ports:
      - 25432:5432
    volumes:
      # - ./certs:/etc/certs:ro
      - .docker-data/pg2:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    # command: postgres -c ssl=on -c ssl_cert_file=/etc/certs/local-cert.pem -c ssl_key_file=/etc/certs/local-key.pem
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 20
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.services.pg2.loadBalancer.server.port=5432"
      - "traefik.tcp.routers.pg2.entrypoints=postgres"
      - "traefik.tcp.routers.pg2.rule=HostSNI(`*`)"
      # - "traefik.tcp.routers.pg2.rule=HostSNI(`pg2.docker.localhost`)"
      # - "traefik.tcp.routers.pg2.tls=false"

  proxy:
    # image: marcopeg/traefik-local-tls
    build: .
    ports:
      - 80:80
      - 443:443
      - 5432:5432
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/certs:ro
